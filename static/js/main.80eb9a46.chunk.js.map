{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","props","target","href","link","className","style","recipe","name","calories","ingredients","map","ingredient","text","src","image","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","label","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6PAiBeA,EAdA,SAACC,GACZ,OACI,oBAAGC,OAAO,SAASC,KAAMF,EAAMG,KAAMC,UAAWC,IAAMC,OAAtD,UACQ,6BAAKN,EAAMO,OACX,8BAAIP,EAAMQ,SAAV,eACCR,EAAMS,YAAYC,KAAI,SAAAC,GAAU,OAC7B,mBAAGP,UAAWC,IAAMM,WAApB,SAAiCA,EAAWC,UAEhD,qBAAKC,IAAKb,EAAMc,MAAOC,IAAI,UAAUX,UAAWC,IAAMS,YC2CvDE,MAlDf,WAEE,IAFa,EAKiBC,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOaJ,mBAAS,WAPtB,mBAONK,EAPM,KAOCC,EAPD,KASbC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAHC,2CAAH,qDAehB,OACE,sBAAK3B,UAAU,MAAf,UACE,uBAAM4B,SAPQ,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,IAKoBhB,UAAU,cAArC,UACE,uBAAOA,UAAU,aAAa+B,KAAK,OAAOC,MAAOhB,EAAQiB,SAZ1C,SAAAJ,GACnBZ,EAAUY,EAAEhC,OAAOmC,UAYf,wBAAQhC,UAAU,gBAAgB+B,KAAK,SAAvC,uBAEF,qBAAK/B,UAAU,UAAf,SACGc,EAAQR,KAAI,SAAAJ,GAAM,OACjB,cAAC,EAAD,CAEAC,KAAMD,EAAOA,OAAOgC,MACpB9B,SAAUF,EAAOA,OAAOE,SACxBM,MAAOR,EAAOA,OAAOQ,MACrBL,YAAaH,EAAOA,OAAOG,YAC3BN,KAAMG,EAAOA,OAAOiC,KALfjC,EAAOA,OAAOgC,gBC7BdE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,WAAa,2BAA2B,MAAQ,yB","file":"static/js/main.80eb9a46.chunk.js","sourcesContent":["import React from \"react\"\nimport style from './recipe.module.css'\n\nconst Recipe = (props) => {\n    return(\n        <a target=\"_blank\" href={props.link} className={style.recipe}>\n                <h1>{props.name}</h1>\n                <p>{props.calories} calories</p>\n                {props.ingredients.map(ingredient=>(\n                    <p className={style.ingredient}>{ingredient.text}</p>\n                ))}\n                <img src={props.image} alt=\"bok bok\" className={style.image}/>\n        </a>\n        \n    );\n}\n\nexport default Recipe","import React, {useEffect, useState} from \"react\"\nimport './App.css';\nimport Recipe from \"./Recipe\"\n\nfunction App() {\n\n  const APP_ID = '99d831d5'\n  const APP_KEY = '86d104ee24adb538bd1d5dd7cc8ef302'\n\n  const [recipes, setRecipes] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('chicken')\n\n  useEffect( () => {\n    getRecipes()\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n    const data = await response.json();\n    setRecipes(data.hits)\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value)\n  }\n\n  const getSearch = e => {\n    e.preventDefault()\n    setQuery(search)\n  }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">search</button>\n      </form>\n      <div className=\"Recipes\">\n        {recipes.map(recipe=>(\n          <Recipe \n          key={recipe.recipe.label}\n          name={recipe.recipe.label} \n          calories={recipe.recipe.calories} \n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n          link={recipe.recipe.url}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"ingredient\":\"recipe_ingredient__1gatH\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}